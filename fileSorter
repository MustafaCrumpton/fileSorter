import os
import shutil
import sys
import time
import logging

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


source_dir = "c:\\Users\\Mustafa\\Downloads"
dest_dir_video = "C:\\Users\\Mustafa\\Desktop\\downloaded videos"
dest_dir_music = "c:\\Users\\Mustafa\\Desktop\\downloaded music"
dest_dir_image = "c:\\Users\\Mustafa\\Desktop\\downloaded images"

def make_unique(dest, name): #accounts for duplicate filenames
    nameSplit = os.path.splitext(name)
    filename = str(nameSplit[0])
    extension = str(nameSplit[1])

    counter = 1

    # * IF FILE EXISTS, ADDS NUMBER TO THE END OF THE FILENAME
    while os.path.exists(f"{dest}/{name}"):
        name = f"{filename}({str(counter)}){extension}"
        counter += 1

    return name

def move (dest, entry, name):
    file_exists = os.path.exists(dest + "/" + name)
    if file_exists:
        unique_name = make_unique(name)
        os.rename(entry, unique_name)
        shutil.move(entry, dest)


class MoverHandler(FileSystemEventHandler):
    def on_modified(self,event):
        with os.scandir(source_dir) as entries: #'entries' represents all the files in the specified folder
            for entry in entries: #loops through each object in the list
                name = entry.name
                dest = source_dir
                if name.endswith('.mov') or name.endswith('.mp4'):
                    dest = dest_dir_video
                    move(dest, entry, name)
                elif name.endswith(".png") or name.endswith(".jpeg") or name.endswith(".jpg"):
                    dest = dest_dir_image
                    move(dest,entry, name)
                



if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')
    path = source_dir
    event_handler = MoverHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

   
